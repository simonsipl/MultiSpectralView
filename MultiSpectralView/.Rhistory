shiny::runApp()
data_plot_filter$Excitation[which(data_plot_filter$Wavelength)]
data_plot_filter$Excitation[which(data_plot_filter$Wavelength) ==0]
data_plot_filter$Excitation[which(data_plot_filter$Wavelength) == data_plot_f$Wavelength[1]]
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])]
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])
shiny::runApp()
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[300])])
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[111])])
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[0])])
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[1])])
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[7])])
length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[999])])
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])]==0
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[2])]==0
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[6])]==0
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[1])]==0
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[0])]==0
data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[434])]==0
data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[333])]
data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[111])]
data_plot_f$Excitation[1] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[1])]
for(i in length(fluoro_ex))
{
if(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])]==0)
{
fluoro_ex[i] = 0
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
sum(fluoro_ex)
sum(data_plot_f$Excitation)
sum(fluoro_ex)/sum(data_plot_f$Excitation)
sum(fluoro_ex)/sum(data_plot_f$Excitation) = 100
sum(fluoro_ex)/sum(data_plot_f$Excitation) + 100
sum(fluoro_ex)/sum(data_plot_f$Excitation) * 100
shiny::runApp()
k_ex=sum(fluoro_ex)/sum(data_plot_f$Excitation)*100
round(k_ex)
floor(k_ex)
round(k_ex,digits=2)
shiny::runApp()
shiny::runApp()
for(i in length(fluoro_ex))
ds
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fluorochrome_name = "Alexa Fluor 350.csv"
filter_ex_name = "Filter70Ex.csv"
path_fluorochrome = paste('./Fluorochromes/',fluorochrome_name , sep = "")
data_plot_f <- read.csv(path_fluorochrome)
path_filter = paste('./Filters/',filter_ex_name , sep = "")
data_plot_filter <- read.csv(path_filter)
fluoro_ex = data_plot_f$Excitation
k_ex = NULL
i=0
for(i in length(fluoro_ex))
{
if(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])]==0)
{
fluoro_ex[i] = 0
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=round(sum(fluoro_ex)/sum(data_plot_f$Excitation),digits=2)
k_ex
for(i in length(fluoro_ex))
{
if(data_plot_filter$Excitation[which(data_plot_filter$Wavelength != data_plot_f$Wavelength[i])]==0)
{
fluoro_ex[i] = 0
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
for(i in length(fluoro_ex))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = 0
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=round(sum(fluoro_ex)/sum(data_plot_f$Excitation),digits=2)
k_ex
mean(fluoro_ex)
mean(fluoro_ex)/sum(data_plot_f$Excitation)
mean(fluoro_ex)/sum(data_plot_f$Excitation)*100
shiny::runApp()
shiny::runApp()
median(fluoro_ex)
average(fluoro_ex)
sum(fluoro_ex)
sum(fluoro_ex)/100
56.71314/sum(data_plot_f$Excitation)
56.71314/sum(data_plot_f$Excitation)*100
View(data_plot_f)
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = 0
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=mean(fluoro_ex)/sum(data_plot_f$Excitation)*100
k_ex
k_ex=fluoro_ex/sum(data_plot_f$Excitation)*100
k_ex
mean(k_ex)
sum(k_ex)
shiny::runApp('C:/Users/Hikaryu/Desktop/inz/SpectraMultiView')
shiny::runApp()
k_ex=fluoro_ex/sum(data_plot_f$Excitation)*100
k_ex
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = NULL
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=fluoro_ex/sum(data_plot_f$Excitation)*100
k_ex
k_ex=sum(fluoro_ex)/sum(data_plot_f$Excitation)*100
k_ex
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = NULL
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=sum(fluoro_ex)/sum(data_plot_f$Excitation)*100
k_ex
fluoro_ex
i=0
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = NULL
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=sum(fluoro_ex)/sum(data_plot_f$Excitation)*100
k_ex
data.table(fluoro_ex)
x = data.table(fluoro_ex)
View(x)
fluoro_ex[2] = NULL
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = 100
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=sum(fluoro_ex)/sum(data_plot_f$Excitation)*100
k_ex
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex[i] = 100
}
else
{
fluoro_ex[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=sum(fluoro_ex)/sum(data_plot_f$Excitation)
k_ex
shiny::runApp()
shiny::runApp()
path_fluorochrome = paste('./Fluorochromes/',fluorochrome_name , sep = "")
data_plot_f <- read.csv(path_fluorochrome)
path_filter = paste('./Filters/',filter_ex_name , sep = "")
data_plot_filter <- read.csv(path_filter)
fluoro_ex = data_plot_f
k_ex = NULL
for(i in length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex$Excitation[i] = 0
}
else
{
fluoro_ex$Excitation[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
k_ex=sum(fluoro_ex$Excitation)/sum(data_plot_f$Excitation)
k_ex
View(fluoro_ex)
shiny::runApp()
ex=read.table(paste(wdir,'./SpectraMultiView/fluorochromes',sprintf('%s',fluorochromes[input$fluor,3]),sep='/'))
em=read.table(paste(wdir,'./SpectraMultiView/fluorochromes',sprintf('%s',fluorochromes[input$fluor,5]),sep='/'))
f_ex=read.table(paste(wdir,'./SpectraMultiView/sets',sprintf('%s',sets[input$set,3]),sep='/'))
dc=read.table(paste(wdir,'./SpectraMultiView/sets',sprintf('%s',sets[input$set,5]),sep='/'))
f_em=read.table(paste(wdir,'./SpectraMultiView/sets',sprintf('%s',sets[input$set,7]),sep='/'))
#     przemnozenie ex i em przez filtry
n_ex=ex
for (i in 1:length(ex$V1)){
if (length(f_ex$V2[which(f_ex$V1==ex$V1[i])])==0){
n_ex$V2[i]=0
}
else {
n_ex$V2[i]=ex$V2[i]*f_ex$V2[which(f_ex$V1==ex$V1[i])]
}
}
n_em=em
for (i in 1:length(em$V1)){
l
r
)
rnorm()
?rnorm
shiny::runApp()
shiny::runApp()
c()+1
c()+c(1)
c()+ "1"
x<-c(1)
x<-c(2)
x<-c(x,2)
shiny::runApp()
colnames(t)=c("Excitation Loss [%]","Emission Loss [%]")
t = as.table(resultTable)
resultTable = c('','')
colnames(resultTable)=c("Excitation Loss [%]","Emission Loss [%]")
t=matrix(resultTable)
colnames(t)=c("Excitation Loss [%]","Emission Loss [%]")
t[]=ifelse(!is.na(as.numeric(t)),format(as.numeric(t),digits=3),t)
colnames(t)=c("filter [%]","d.mirror [%]","filter+mirror [%]","lamp on ex.[%]")
rownames(t)=c("excitation","emmission")
t=as.table(t)
t
colnames(t)=c("filter [%]","d.mirror [%]")
colnames(t)=c("filter [%]")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?norm
shiny::runApp()
shiny::runApp()
shiny::runApp()
?rnorm
?norm
?cnorm
shiny::runApp()
shiny::runApp()
?rnorm
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?exists()
shiny::runApp()
shiny::runApp()
resultTable = c('',resultTable)
t=matrix(resultTable)
t[]=ifelse(!is.na(as.numeric(t)),format(as.numeric(t),digits=3),t)
colnames(t)=c("Filter Loss [%]")
rownames(t)=c("excitation","emmission")
resultTable = c('',resultTable)
resultTable = c()
resultTable = c('',resultTable)
resultTable = c(k_em,resultTable)
resultTable = c('',resultTable)
t=matrix(resultTable)
t[]=ifelse(!is.na(as.numeric(t)),format(as.numeric(t),digits=3),t)
colnames(t)=c("Filter Loss [%]")
rownames(t)=c("excitation","emmission")
t=as.table(t)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x$1
x$s = 1
x
x <-NULL
x$s = 1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("flux")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
path_fluorochrome = './Fluorochromes/Alexa Fluor 350.csv'
path_filter = './Filters/NewFilterEm.csv'
data_plot_f <- read.csv(path_fluorochrome)
data_plot_filter <- read.csv(path_filter)
fluoro_em = data_plot_f
for(i in 1:length(fluoro_em$Wavelength))
{
if(length(data_plot_filter$Emission[which(data_plot_filter$Emission == data_plot_f$Emission[i])])==0)
{
fluoro_em$Emission[i] = 0
}
else
{
fluoro_em$Emission[i] = data_plot_f$Emission[i] * data_plot_filter$Emission[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
#fluoro_em$Emission = dnorm(fluoro_em$Emission)
k_em=sum(fluoro_em$Emission)/sum(data_plot_f$Emission)
p_em=auc(fluoro_em$Wavelength,fluoro_em$Emission)/auc(data_plot_f$Wavelength,data_plot_f$Emission)*100
auc(fluoro_em$Wavelength,fluoro_em$Emission)
fluoro_em$Emission
data_plot_filter$Emission
View(data_plot_filter)
path_fluorochrome = paste('./Fluorochromes/',fluorochrome_name , sep = "")
data_plot_f <- read.csv(path_fluorochrome)
path_filter = paste('./Filters/',filter_ex_name , sep = "")
data_plot_filter <- read.csv(path_filter)
fluoro_ex = data_plot_f
fluoro_em = data_plot_f
for(i in 1:length(data_plot_f$Wavelength))
{
if(length(data_plot_filter$Excitation[which(data_plot_filter$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex$Excitation[i] = 0
}
else
{
fluoro_ex$Excitation[i] = data_plot_f$Excitation[i] * data_plot_filter$Excitation[which(data_plot_filter$Wavelength==data_plot_f$Wavelength[i])]
}
}
#fluoro_ex$Excitation = dnorm(fluoro_ex$Excitation)
k_ex=sum(fluoro_ex$Excitation)/sum(data_plot_f$Excitation)
p_ex=auc(fluoro_em$Wavelength,fluoro_em$Excitation)/auc(data_plot_f$Wavelength,data_plot_f$Excitation)*100
fluoro_ex$Excitation
shiny::runApp()
auc(fluoro_em$Wavelength,fluoro_em$Excitation)
auc(data_plot_f$Wavelength,data_plot_f$Excitation)*100
auc(data_plot_f$Wavelength,data_plot_f$Excitation)
p_ex=auc(fluoro_ex$Wavelength,fluoro_ex$Excitation)/auc(data_plot_f$Wavelength,data_plot_f$Excitation)*100
uc(fluoro_ex$Wavelength,fluoro_ex$Excitation)
auc(fluoro_ex$Wavelength,fluoro_ex$Excitation)
auc(data_plot_f$Wavelength,data_plot_f$Excitation)
p_ex=auc(fluoro_ex$Wavelength,fluoro_ex$Excitation)/auc(data_plot_f$Wavelength,data_plot_f$Excitation)
shiny::runApp()
View(data_plot_filter)
x <-data_plot_filter$Wavelength
x$Emission <- data_plot_filter$Excitation
x$Wavelength <-data_plot_filter$Wavelength
x = NULL
x$Wavelength <-data_plot_filter$Wavelength
x$Emission <- data_plot_filter$Excitation
x$Excitation <- data_plot_filter$Emission
write.csv(x,"FilterEmission.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
path_fluorochrome = './Fluorochromes/Alexa Fluor 405.csv'
path_filter_em = './Filters/Filter Emission'
path_filter_ex = './Filters/Filter70Ex.csv'
path_filter_em = './Filters/Filter Emission.csv'
shiny::runApp()
data_plot_f <- read.csv(path_fluorochrome)
data_plot_filter_ex <- read.csv(path_filter_ex)
fluoro_ex = data_plot_f
for(i in 1:length(data_plot_f$Wavelength))
{
if(length(data_plot_filter_ex$Excitation[which(data_plot_filter_ex$Wavelength == data_plot_f$Wavelength[i])])==0)
{
fluoro_ex$Excitation[i] = 0
}
else
{
fluoro_ex$Excitation[i] = data_plot_f$Excitation[i] * (100-sum(data_plot_filter_ex$Excitation[which(data_plot_filter_ex$Wavelength==data_plot_f$Wavelength[i])]))
}
}
k_ex=sum(fluoro_ex$Excitation)/sum(data_plot_f$Excitation)
p_ex=auc(fluoro_ex$Wavelength,fluoro_ex$Excitation)/auc(data_plot_f$Wavelength,data_plot_f$Excitation)
path_fluorochrome = paste('./Fluorochromes/',fluorochrome_name , sep = "")
data_plot_f <- read.csv(path_fluorochrome)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
